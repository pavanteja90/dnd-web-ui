@mixin grid-columns($maxCount: 12) {
    @for $num from 1 to $maxCount {
        $numText: number-to-string($num);
        &.#{$numText} {
            grid-template-columns: repeat($num, minmax(100px, 1fr));
            & > .full-wide,
            & > .full-width {
                grid-column-start: 1;
                grid-column-end: $num + 1;
            }
        }
        > .#{$numText}-wide,
        > .#{$numText}.wide {
            grid-column: span $num;
        }
    }
}

@function number-to-string($num) {
    @if $num == 1 {
        @return "one";
    } @else if $num == 2 {
        @return "two";
    } @else if $num == 3 {
        @return "three";
    } @else if $num == 4 {
        @return "four";
    } @else if $num == 5 {
        @return "five";
    } @else if $num == 6 {
        @return "six";
    } @else if $num == 7 {
        @return "seven";
    } @else if $num == 8 {
        @return "eight";
    } @else if $num == 9 {
        @return "nine";
    } @else if $num == 10 {
        @return "ten";
    } @else if $num == 11 {
        @return "eleven";
    } @else if $num == 12 {
        @return "twelve";
    }
}

@mixin grid($screen-sizes: $screen-sizes) {
    .columns {
        > a:not(.mat-flat-button) {
            line-height: 0 !important;
        }
        display: grid;
        grid-column-gap: 10px;
        grid-row-gap: 10px;
        @media only screen and (max-width: map-get($screen-sizes, tabletBreakpoint) - 1px) {
            &:not(.no-stack) {
				display: block;
                grid-template-columns: repeat(
                    1,
                    1fr
                ) !important; // grid-auto-rows: 200px;
                > * {
                    grid-column: span 1 !important;
                    grid-column-end: auto !important;
                }
            }
        }
        &.no-gap {
            grid-column-gap: 0px;
            grid-row-gap: 0px;
        }
        &.align-middle {
            align-items: center;
        }
        @include grid-columns(12);
        &.four {
            @media only screen and (max-width: map-get($screen-sizes, computerBreakpoint)) {
                grid-template-columns: repeat(
                    2,
                    1fr
                ) !important; // grid-auto-rows: 200px;
            }
        }
        // &.one {
        // grid-template-columns: repeat(1, minmax(100px, 1fr)); // grid-auto-rows: 200px;
        // }
        // &.two {
        // grid-template-columns: repeat(2, minmax(100px, 1fr)); // grid-auto-rows: 200px;
        // // @media only screen and (max-width: map-get($screen-sizes, tabletBreakpoint)) {
        // //     grid-template-columns: repeat(1, 1fr); // grid-auto-rows: 200px;
        // // }
        // > .full-width {
        // grid-column-start: 1;
        // grid-column-end: 3;
        // }
        // }
        // &.three {
        // grid-template-columns: repeat(3, minmax(100px, 1fr)); // grid-auto-rows: 200px;
        // > .double-width {
        // grid-column-start: 1;
        // grid-column-end: 3;
        // }
        // > .full-width {
        // grid-column-start: 1;
        // grid-column-end: 4;
        // }
        // }

        // &.four {
        // grid-template-columns: repeat(4, minmax(100px, 1fr)); // grid-auto-rows: 200px;
        // > .double-width {
        // grid-column-start: 1;
        // grid-column-end: 4;
        // }
        // > .full-width {
        // grid-column-start: 1;
        // grid-column-end: 5;
        // }
        // }

        // &.five {
        // grid-template-columns: repeat(5, minmax(100px, 1fr)); // grid-auto-rows: 200px;
        // > .double-width {
        // grid-column-start: 1;
        // grid-column-end: 5;
        // }
        // > .full-width {
        // grid-column-start: 1;
        // grid-column-end: 6;
        // }
        // }

        .new-row,
        .row {
            grid-column-start: 1;
        }
    }
}
